vector
vector()
ls()
v <- vector(3)
v <- vector("logical",3)
v <- vector("numeral",3)
v <- vector("numerical",3)
v <- vector("number",3)
v <- vector("numeric",3)
v[0]
v[1]
vector(1)
v.attributes()
vector.attributes()
attributes
attributes(v)
x<-1
print(x)
print(v)
v <- 1,2,3
v <- 1
v <- 1:3
v <- 1:4
v <- (1,5,7)
v <- [1,2,3]
v <- {1,2,3}
v
x
x <- 1:20
x
v <- c(1,7,9)
erase
delete
x<-1+2i
list
x <- c(1.7, "a")
x<-c(T,2)
x<-c(T,"a")
class(x)
as.numeric(x)
as.numeric(v)
m <- matrix(2,3)
m
m <- matrix(nrow=2,ncol=3)
m
m <- matrix(nrow=3,ncol=3)
m
a<-c(1,0,0)
b<-c(0,1,0)
c<-c(0,0,1)
m<-cbind(a,b,c)
m
m<-matrix(c(1,0,0,0,1,0,0,0,1), nrow=3, ncol=3)
m
x<-list(1,"a")
x
lm
x<-factor(c(1,2,3))
x
x<-factor(c("yes","no","no"))
x
x<-factor(c("yes","no","no"),levels = c("yes","no"))
x
is.na(a)
is.nan(a)
x<-c(0,0,0,0)
names(x)
names(x)<-c("t","x","y","z")
x
x(3)
x[3]
x[3]<-7
x
for
x
q()
vector
x<-c(1.7,2,3)
x[3]
x[0]
x[1]
x[1:2]
y<-x[1:2]
x[x>1.8]
x>1.8
x<-matrix(1:6,2,3)
x
x[2,]
x[,]
matrix
?runif
runif(2)
runif(10)
?sapply
x<-c(2,3,47)
x<-c(2,3,4)
lapply(x,function(y) y*y)
lapply(x,function(y){ y*y})
lapply(x,function(y){y*y})
?gl
message <- function(x) {
if(x>0)
print("beurre")
else
print("bibouze")
}
message(1)
message(-1)
message(0)
message(NA)
traceback(message(NA))
?traceback
message(NA)
traceback()
traceback(1)
traceback()
debug(message)
message(NA)
message(NA)
?debug
undebug(message)
message(NA)
?options
options(error=recover)
message(NA)
options(error=NULL)
clear()
clear
setwd("C:/Users//PAYET KEVIN/GIT/repos//data_science/R_programming_Assign2/")
dir()
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
makeCacheMatrix()
cached_list<-makeCacheMatrix()
cached_list
rbind(1:2,3:4)
text_matrix <- rbind(1:2,3:4)
solve(text_matrix)
solve(text_matrix)%*%text_matrix
makeCacheMatrix(text_matrix)
cached_list%set(text_matrix)
cached_list$set(text_matrix)
cached_list$get()
cached_list$get_inverse()
cached_list$get_inverse()[1,1]
source("cachematrix.R")
source("cachematrix.R")
test_matrix <- rbind(1:2,3:4)
test_list <- makeCacheMatrix(test_matrix)
test_list
test_list$get()
test_list$get_inverse()
cacheSolve(test_list)
test_list$get_inverse()
cacheSolve(test_list)
test_matrix <- rbind(2:3,4:5)
test_list$set(test_matrix)
cacheSolve(test_list)
cacheSolve(test_list)
cacheSolve(test_list)
test_list$set(test_matrix)
cacheSolve(test_list)
source("cachematrix.R")
test_matrix <- rbind(2:3,4:5)
makeCacheMatrix(test_matrix)
test_list <- makeCacheMatrix(test_matrix)
cacheSolve(test_list)
cacheSolve(test_list)
source("cachematrix.R")
cacheSolve(test_list)
cacheSolve(test_list)
test_list$set(test_matrix)
cacheSolve(test_list)
cacheSolve(test_list)
